{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport ShopActionsTypes from './shop.types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    // Collection named: 'collection' from firebase\n    const collectionRef = firestore.collection('collections'); // Snapshot from the collection\n\n    const snapshot = yield collectionRef.get(); // Convert the object to a map\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // Send collections to the store (Type: map) if the request succeeded\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    // Send the error to the store if there was a failure\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionsTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([fetchCollectionsStart()]);\n}","map":{"version":3,"sources":["C:\\Users\\Alber\\Desktop\\react-course\\crwn-clothing\\client\\src\\redux\\shop\\shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","ShopActionsTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB,CAFE,CAGF;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAJE,CAKF;;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAC/BI,+BAD+B,EAE/BO,QAF+B,CAAjC,CANE,CAUF;;AACA,UAAMV,GAAG,CAACK,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACd;AACA,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMjB,UAAU,CACdM,gBAAgB,CAACY,uBADH,EAEdT,qBAFc,CAAhB;AAID;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhB,GAAG,CAAC,CAACc,qBAAqB,EAAtB,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap\r\n} from '../../firebase/firebase.utils';\r\n\r\nimport ShopActionsTypes from './shop.types';\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure\r\n} from './shop.actions';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  try {\r\n    // Collection named: 'collection' from firebase\r\n    const collectionRef = firestore.collection('collections');\r\n    // Snapshot from the collection\r\n    const snapshot = yield collectionRef.get();\r\n    // Convert the object to a map\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    );\r\n    // Send collections to the store (Type: map) if the request succeeded\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    // Send the error to the store if there was a failure\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n  yield takeLatest(\r\n    ShopActionsTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  );\r\n}\r\n\r\nexport function* shopSagas() {\r\n  yield all([fetchCollectionsStart()])\r\n}"]},"metadata":{},"sourceType":"module"}